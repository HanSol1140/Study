
# 출력함수 print의 사용 방법
# print(*values) 출력할 값 인자를 원하는 만큼 입력하기
# *values? = 무한으로 값을 넣을 수 있다.
print(1,2,3,4,5,6) # 1 2 3 4 5 6
print(1,2,3,4,5,6, 'a', 'b', 'c', 'e', [1, 2, 3]) # 1 2 3 4 5 6 a b c e [1, 2, 3]


# print(*values, sep=) 값 사이에 구분자(seperator) 지정 기본은 ' '
# sep = 구분자(seperator)
print(1,2,3,4,5,6) # print(1,2,3,4,5,6)
print(1,2,3,4,5,6, sep='') # 123456
print(1,2,3,4,5,6, sep='/') # 1/2/3/4/5/6


# print(*values, sep=, end=) 출력 마무리에 붙일 문자. 기본 지정은 '\n'(줄바꿈)
# end = escape

print(1,2,3,4,5,6) # 1 2 3 4 5 6
print(1,2,3,4,5,6, end = 'n') # 1 2 3 4 5 6n 
# => print의 마지막에 end에 'n'으로 설정된 데이터를 넣어줍니다.

# 체크할 점
print(1,2,3,4,5,6) # 1 2 3 4 5 6n1 2 3 4 5 6   =>   ??

# 여기서 print(1,2,3,4,5,6)을 출력해 보면
# 위에 출력한 print(1,2,3,4,5,6, end = 'n')과 합쳐져서
# 1 2 3 4 5 6n1 2 3 4 5 6 이 출력되는 것을 확인할 수 있습니다
# 이는 end의 기본값이 \n(줄바꿈)으로 설정되어 있어서 그렇습니다
# 상단 print(1,2,3,4,5,6, end = 'n')에서
# end에 \n이 아닌 n으로 들어가서 줄바꿈이 안되고 있습니다.
# sep의 기본값이 ' ' 로 공백이 한칸 설정되어 있는 것과 같은 이유입니다.

# 여러가지 특수문자
print('a\tb') # a       b  => \t => TAB과 같은 기능
print('a\\b') # a\b
print('Spencer\'s') # Spencer's

# print할때 문자 반복 사용
print('=' *20) # ====================