public class Main {
    public static void main(String[] args) {
        System.out.println("Hello!");
    }
}
/**
    1. 위의 예제를 실행시키면 JVM에 의해서 main 메서드가 호출됨으로써 프로그램이 시작됩니다.

         │               │
         │               │
         │               │
         │               │
         └───────────────┘


    2. 이때, 호출스택에서는 AMIN 메서드를 위한 메모리 공간이 할당되고 main메서드의 코드가 수행되기 시작한다
         │               │
         │               │
         │               │
         │      main     │
         └───────────────┘


    3. main 메서드에서 println()을 호출한 상태. 아직 main 메서드가 끝난 것이 아니므로,
       main 메서드는 호출스택에 대기상태로 남아있고 println()의 수행이 시작된다.
       println메서드에 의해 hello가 화면에 출력된다.
         │               │
         │               │
         │    println    │
         │     main      │
         └───────────────┘


    4. println메서드의 수행이 완료되어 호출스택에서 사라지고, 자신을 호출한 main메서드로 되돌아간다
       대기중이던 main메서드는 (println)을 호출한 이후부터 수행을 재개한다.

         │               │
         │               │
         │               │
         │      main     │
         └───────────────┘


    5. main메서드에도 더 이상 수행할 코드가 없으므로 종료되어,
       호출스택은 완전히 비워지게 되고 프로그램은 종료된다.

         │               │
         │               │
         │               │
         │               │
         └───────────────┘


       호출스택을 조사해보면 메서드간의 호출 관계와 현재 수행중인 메서드가 어느 것인지 알 수 있습니다.
       호출스택의 특징을 정리하면 다음과 같습니다.

       - 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다.
       - 메서드가 수행을 마치고 나면 사용했던 메모리를 반환하고 스택에서 제거된다.
       - 호출스택의 제일 위에 있는 메서드가 현재 실행중인 메서드이다.
       - 아래에 있는 메서드가 바로 위의 메서드를 호출한 메서드이다.

       반환타입(return type)이 있는 메서드는 종료되면서 결과값을 자신을 호출한 메서드(caller)에게 반환한다.
       대기상태에 있던 호출한 메서드(caller)는 넘겨받은 반환값으로 수행을 계속 진행하게 됩니다.
 **/